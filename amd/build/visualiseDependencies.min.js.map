{"version":3,"file":"visualiseDependencies.min.js","sources":["../src/visualiseDependencies.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Visualise dependencies.\n *\n * @copyright  2022 Paola Maneggia, Mathias Kegelmann\n * @author     Paola Maneggia <paola.maneggia@gmail.com>, Mathias Kegelmann <mathias.kegelmann@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @module     block/availdep\n */\n\nimport Ajax from 'core/ajax';\n\nconst full = 'no';\n\nexport const init = (courseid, full) => {\n    full = full;\n    var promises = Ajax.call([{\n        methodname: 'block_availdep_fetch_course_modules_with_names_and_dependencies',\n        args: {courseid: courseid}\n    }\n]);\n\npromises[0].fail(ex => console.log(ex))\n    .then(dependencies => {\n        let dimensions = determineSvgSize();\n        setupSvg(dimensions);\n        dependencies.forEach(d => {d.depend = JSON.parse(d.depend)});\n        let simulation;\n        let hierarchies;\n        if (full === 'no') {\n            simulation = generateSimplifiedSimulation(dependencies);\n            displaySimplifiedGraph(simulation);\n        } else {\n            simulation = generateFullSimulation(dependencies);\n            displayFullGraph(simulation);\n        }\n        rememberD3Selections();\n        storeAncestorEdgesAndNodesInAllNodes(edges);\n        simulation.on('tick', tick);\n        makeDraggable(simulation);\n        makeDoubleClickable(simulation);\n    });\n};\n\nlet toggleHighlight = 0;\n\nlet nodeColour = '#AEDAEA';\nlet textColour = '#364958';\nlet arrowColour = '#516E84';\nlet andColour = '#FFB400';\nlet orColour = '#CEFF1A';\nlet notAndColour = '#F9CFF2';\nlet notOrColour = '#D1FAFF';\nlet otherOperatorColour = '#D1FAFF';\nlet notColour = '#EA7B5D';\n\nlet fullNodeRadius = 50;\nlet operatorRadius = 20;\n\nlet arrowWidth = 2;\n\nlet svgWidth;\nlet svgHeight;\n\n/**\n * Make the svg as wide as the parent, height is width * 0.6, center viewBox.\n */\nfunction setupSvg(dimensions) {\n    d3.select('svg.availdep')\n        .attr('width', dimensions.width)\n        .attr('height', dimensions.height)\n        .attr('viewBox', -dimensions.width/2 + ' ' + -dimensions.height/2\n            + ' ' + dimensions.width + ' ' + dimensions.height);\n    addMarker();\n    addFilterDropShadow();\n}\n\nfunction addMarker() {\n    let dev = d3.select('g.availdep').append('defs');\n    dev.append('marker')\n      .attr('id', 'arrow')\n      .attr('viewBox', \"0 0 10 10\")\n      .attr('refX', 23)\n      .attr('refY', 5)\n      .attr('markerUnits', 'strokeWidth')\n      .attr('markerWidth', 6)\n      .attr('markerHeight', 8)\n      .attr('orient', 'auto')\n    .append('path')\n      .attr('fill', arrowColour)\n      .attr('d', 'M 0 0 L 10 5 L 0 10 z');\n    \n    dev.append('marker')\n      .attr('id', 'arrowToActivity')\n      .attr('viewBox', \"0 0 10 10\")\n      .attr('refX', 52)\n      .attr('refY', 5)\n      .attr('markerUnits', 'strokeWidth')\n      .attr('markerWidth', 6)\n      .attr('markerHeight', 8)\n      .attr('orient', 'auto')\n    .append('path')\n      .attr('fill', arrowColour)\n      .attr('d', 'M 0 0 L 10 5 L 0 10 z');\n\n    dev.append('marker')\n      .attr('id', 'arrowToOperator')\n      .attr('viewBox', \"0 0 10 10\")\n      .attr('refX', 27)\n      .attr('refY', 5)\n      .attr('markerUnits', 'strokeWidth')\n      .attr('markerWidth', 6)\n      .attr('markerHeight', 8)\n      .attr('orient', 'auto')\n    .append('path')\n      .attr('fill', arrowColour)\n      .attr('d', 'M 0 0 L 10 5 L 0 10 z');\n}\n\nfunction addFilterDropShadow() {\n    let dev = d3.select('g.availdep defs');\n    dev.append('filter')\n      .attr('id', 'textShadow')\n    .append('feDropShadow')\n      .attr('dx', 0)\n      .attr('dy', 0)\n      .attr('stdDeviation', 2)\n      .attr('flood-color', 'white')\n      .attr('flood-opacity', 1)\n}\n\nfunction determineSvgSize() {\n    let svg = document.querySelector('svg.availdep');\n    let width = svg.parentNode.clientWidth;\n    let orientation = screen.orientation?.type;\n    let height = orientation === \"portrait-primary\" ? width * 1.3 : width * 0.6;\n    svgWidth = width;\n    svgHeight = height;\n    return {width, height};\n}\n\n/**\n * Generate a simulation, using the nodes and edges (links)\n * extracted from the dependencies between course modules.\n * The nodes are indexed by the course module id.\n * @param {json} dependencies\n * @returns d3 simulation object\n */\nfunction generateSimplifiedSimulation(dependencies) {\n    return d3.forceSimulation(dependencies)\n        .force('x0', d3.forceX())\n        .force('y0', d3.forceY())\n        .force('collide', d3.forceCollide().radius(20))\n        .force('charge', d3.forceManyBody().strength(-300))\n        .force('link', d3.forceLink(computeEdgesSimplifiedDependencies(dependencies)).distance(200).id(d => d.id));\n}\n\n/**\n * Generate a simulation, using the nodes and edges (links)\n * extracted from the dependencies between course modules.\n * The activity nodes are indexed by the course module id,\n * the operator nodes are indexed by a generated unique id.\n * @param dependencies Array of objects with fields {id, name, depend, predecessor}\n * @returns d3 simulation object\n */\nfunction generateFullSimulation(dependencies) {\n    let {edges, nodes} = computeEdgesAndNodesFullDependencies(dependencies);\n    return d3.forceSimulation(nodes)\n        .force('x0', d3.forceX())\n        .force('y0', d3.forceY())\n        .force('isSource', d3.forceX(-svgWidth/3).strength(n => n.isSource))\n        .force('isTarget', d3.forceX(svgWidth/3).strength(n => n.isTarget))\n        .force('collide', d3.forceCollide(100).radius(n => (n.genus === 'activity' ? fullNodeRadius : operatorRadius) + 30))\n        .force('charge', d3.forceManyBody().strength(-300))\n        .force('link', d3.forceLink(edges).distance(50).id(d => d.id));\n}\n\n/**\n * For a simplified representation, flatten any nesting.\n * @param {} dependencies \n */\nfunction computeEdgesSimplifiedDependencies(dependencies) {\n    // for an array of nested dependencies\n    // extract all the cm.id of leaves of type 'completion'\n    let leaves = (depend => // TODO fix small bug here d.op && !d.type\n        depend.c.flatMap(d => d.op ? leaves(d) : (d.type === 'completion' ? d.cm : [])));\n    return dependencies\n        .filter(({id, name, depend, predecessor}) => (depend !== null))\n        .map(({id, name, depend, predecessor}) => \n            leaves(depend).map(cm => {return {\n                target: id,\n                source: cm === -1 ? predecessor : cm,\n                name: name\n            }}))\n        .flat();\n}\n\n/**\n * For a full representation we need nodes for the operators besides the nodes\n * representing the activities. For each node we use fields id, name, genus (activity or operator),\n * isSource and isTarget (the last two are for the layout - sort of extenden fuzzy logic,\n * they are a quantity instead of a boolean).\n * An activity node has as id its course module id and as name its name.\n * An operator node has as id the a uniquely generated id.\n * \n * For each completion of an activity there is a flag 'e' which\n * can have value 0, 1, 2 or 3 (meaning: activity (0) should not be completed; (1) must be completed;\n * (2) must be completed an passed; (3) must be completed and failed).\n * TODO Add a node with that flag between the activity and the previous node.\n * @param {} dependencies \n */\nfunction computeEdgesAndNodesFullDependencies(dependencies) {\n\n    function onlyNonCompletionConditionsIn(dependList) {\n        return dependList.filter(c => (c.type && c.type == 'completion' || (!c.type && c.op))).length === 0;\n    }\n    \n    let uid = 0;\n\n    function getNextUID() {\n        return 'uid_' + uid++;\n    }\n\n    function extractActivityNodes(dependencies) {\n        return dependencies.map(d => {\n            return {\n                id: d.id,\n                name: d.name,\n                genus: 'activity',\n                isSource: 0,\n                isTarget: 0,\n            }\n        });\n    }\n\n    let edges = [];\n    let nodes = extractActivityNodes(dependencies);\n\n    // id is the id field of the target node, of genus 'operator' after the first call.\n    // toGenus: genus of the target node ('activity' or 'operator')\n    // dependList the list of dependencies that have the node with id id as target\n    // predecessor is the cmid of the activity node for which we are extracting the information,\n    // to be used if in the nesting of dependencies there will be one with {type: 'completion', cm:-1}\n    // An edge has the same genus as its target.\n    function extractEdgesAndNodes(id, toGenus, dependList, predecessor) {\n        dependList.forEach(el => {\n            if (!el.type && el.op && !onlyNonCompletionConditionsIn(el.c)) {\n                // generate node\n                let newNode = {\n                    id: getNextUID(),\n                    name: el.op,\n                    genus: 'operator',\n                    isTarget: 0.1,\n                    isSource: 0.1\n                };\n                nodes.push(newNode);\n                // generate edge\n                let newEdge = {\n                    target: id,\n                    source: newNode.id,\n                    toGenus: toGenus\n                };\n                edges.push(newEdge);\n                //recursive call\n                extractEdgesAndNodes(newNode.id, 'operator', el.c, predecessor);\n            } else if (el.type === 'completion' && el.e > 0) {\n                // generate edge\n                let newEdge = {\n                    target: id,\n                    source: el.cm === -1 ? predecessor : el.cm,\n                    toGenus: toGenus\n                };\n                // increase isSource of the source node to a max of 1.5\n                let sn = nodes.find(n => n.id === newEdge.source);\n                sn.isSource = (sn.isSource + 0.6 > 1.5 ? 1.5 : sn.isSource + 0.6);\n                edges.push(newEdge);\n            } else if (el.type === 'completion' && el.e === 0){\n                // connect with two edges a 'not' node in between\n                let newNode = {\n                    id: getNextUID(),\n                    name: 'not',\n                    genus: 'operator',\n                    isTarget: 0.1,\n                    isSource: 0.1\n                };\n                let newEdgeFromNot = {\n                    target: id,\n                    source: newNode.id,\n                    toGenus: toGenus\n                };\n                let newEdgeToNot = {\n                    target: newNode.id,\n                    source: el.cm === -1 ? predecessor : el.cm,\n                    toGenus: 'operator'\n                }\n                nodes.push(newNode);\n                edges.push(newEdgeFromNot);\n                edges.push(newEdgeToNot);\n                // increase isSource of the source node to a max of 1.5\n                let sn = nodes.find(n => n.id === newEdgeToNot.source);\n                sn.isSource = (sn.isSource + 0.6 > 1.5 ? 1.5 : sn.isSource + 0.6);\n            }\n        })\n    }\n\n    dependencies.forEach(a => {\n        if(a.depend !== null) {\n            // If an activity has some availability conditions, set the value for isTarget in its node.\n            // For the moment I am not checking if the conditions are of the wrong type\n            nodes.find(n => n.id === a.id).isTarget = 0.9;\n            extractEdgesAndNodes(a.id, 'activity', [a.depend], a.predecessor)\n        }\n    });\n\n    return {edges, nodes};\n}\n\n/**\n * Use d3 to display nodes and edges (links).\n * @param simulation\n */\nfunction displaySimplifiedGraph(simulation) {\n    displaySimplifiedEdges(simulation.force('link').links());\n    displaySimplifiedNodesAndLabels(simulation.nodes());\n}\n\n/**\n * Add the graphical elements to display the edges.\n * @param s_edges Edges (links) in the d3 simulation.\n */\n function displaySimplifiedEdges(s_edges) {\n    d3.select('g.availdep').append('g').selectAll('line').data(s_edges)\n        .enter().append('line')\n        .attr('stroke', arrowColour)\n        .attr('stroke-width', arrowWidth + 'px')\n        .attr(\"stroke-linecap\", \"round\")\n        .attr('marker-end', 'url(#arrow)');\n}\n\n/**\n * Use d3 to display nodes and edges (links).\n * @param simulation\n */\n function displayFullGraph(simulation) {\n    displayFullEdges(simulation.force('link').links());\n    displayFullNodesAndLabels(simulation.nodes());\n}\n\n/**\n * Add the graphical elements to display the edges.\n * @param s_edges Edges (links) in the d3 simulation.\n */\nfunction displayFullEdges(s_edges) {\n    d3.select('g.availdep').append('g').selectAll('line').data(s_edges)\n        .enter().append('line')\n        .attr('stroke', textColour)\n        .attr('stroke-opacity', 0.7)\n        .attr('stroke-width', arrowWidth + 'px')\n        .attr(\"stroke-linecap\", \"round\")\n        .attr('marker-end', e => e.toGenus === 'activity' ?\n            'url(#arrowToActivity' :\n            'url(#arrowToOperator');\n}\n\n/**\n * Add the graphical elements to display the nodes and labels.\n * @param s_nodes Nodes in the d3 simulation.\n */\n function displaySimplifiedNodesAndLabels(s_nodes) {\n    d3.select('g.availdep').append('g').selectAll('circle').data(s_nodes)\n        .join('circle')\n        .attr('fill', nodeColour)\n        .attr('stroke', 'white')\n        .attr('r', 16);\n    d3.select('g.availdep').append('g').selectAll('text').data(s_nodes)\n        .join('text')\n        .attr('fill', textColour)\n        .attr('font-family', 'sans-serif')\n        .attr('font-weight', 'bold')\n      .clone().lower()\n        .attr('stroke', 'white')\n        .attr('stroke-width', 4)\n        .attr('stroke-opacity', 0.5);\n}\n\n/**\n * Add the graphical elements to display the nodes and labels.\n * @param s_nodes Nodes in the d3 simulation.\n */\n function displayFullNodesAndLabels(s_nodes) {\n    d3.select('g.availdep').append('g').selectAll('circle').data(s_nodes)\n        .join('circle')\n        .attr('fill', n => n.genus === 'activity' ? nodeColour\n            : n.name === '&' ? andColour\n            : n.name === '|' ? orColour\n            : n.name === '!&' ? notAndColour\n            : n.name === '!|' ? notOrColour\n            : n.name === 'not' ? notColour\n            : otherOperatorColour)\n        .attr('stroke', 'white')\n        .attr('stroke-width', 3)\n        .attr('r', n => n.genus === 'activity' ? fullNodeRadius : operatorRadius);\n    d3.select('g.availdep').append('g').selectAll('text').data(s_nodes)\n        .join('text')\n        .attr('fill', textColour)\n        .attr('font-family', 'sans-serif')\n        .attr('font-weight', 'bold')\n        .attr('text-anchor', 'middle')\n        .attr('dx', -5)\n        .attr('dominant-baseline', 'middle')\n        .attr('dy', 5)\n        .attr('filter', 'url(#textShadow)');\n}\n\nlet edges, nodes, labels;\n\n/**\n * Save the graphical representation of edges, nodes and labals.\n */\nfunction rememberD3Selections() {\n    edges = d3.select('g.availdep').selectAll('line');\n    nodes = d3.select('g.availdep').selectAll('circle');\n    labels = d3.select('g.availdep').selectAll('text');\n}\n\n/**\n * Update the simulation.\n */\nfunction tick() {\n    nodes\n        .attr('cx', n => n.x)\n        .attr('cy', n => n.y);\n    edges\n        .attr('x1', e => e.source.x)\n        .attr('y1', e => e.source.y)\n        .attr('x2', e => e.target.x)\n        .attr('y2', e => e.target.y);\n    labels\n        .attr('x', n => n.x + 5)\n        .attr('y', n => n.y - 5)\n        .text(n => n.name);\n\n}\n\n/**\n * Make nodes draggable.\n * Once dragged a node is fixed to its assigned position in the simulation.\n * @param simulation\n */\nfunction makeDraggable(simulation) {\n    nodes\n        .call(d3.drag()\n        .on('start', (event, n) => {\n            if (!event.active) simulation.alphaTarget(0.3).restart();\n            n.fx = event.x;\n            n.fy = event.y;\n        })\n        .on('drag',\n            (event, n) => {\n                n.fx = event.x;\n                n.fy = event.y;\n            })\n        .on('end', (event) => {if (!event.active) simulation.alphaTarget(0);})\n        );\n}\n\nfunction makeDoubleClickable(simulation) {\n    nodes.on('click', highlightDependencies);\n}\n\n/**\n * Stores ancestors of each node as an additional property.\n * We need this for the highlight function.\n * @returns array of objects\n */\nfunction storeAncestorEdgesAndNodesInAllNodes(allEdges) {\n    return nodes.data().forEach(n => computeAndStoreAncestorEdgesAndNodes(n, allEdges));\n}\n\n/**\n * Compute the ancestor edges and nodes for a given node and stores then in an\n * additional property 'ancestors' of the node.\n * Even if it would be logically absurd to build a cycle in the directed graph of dependencies,\n * there is no guarantee that this does not happen. Moreover a cycle per se does not mean that\n * some activites are unreachable, since they can be negated.\n * @param {*} node a d3 (circle) node from a selection \n */\nfunction computeAndStoreAncestorEdgesAndNodes(node, allEdges) {\n    let aNodes = new Set();\n    let aEdges = new Set();\n    let toBeExaminedNodes = [node];\n    while (toBeExaminedNodes.length) {\n        // each time one element of the queue of nodes to be examined is moved to the set aNodes\n        let currentNode = toBeExaminedNodes.shift();\n        aNodes.add(currentNode);\n        // iterate over the edges and look for the ones that have the current node as target\n        allEdges.data().forEach(ed => {\n            if (ed.target.id === currentNode.id) {\n                aEdges.add(ed);\n                if (!aNodes.has(ed.source)) {\n                    toBeExaminedNodes.push(ed.source);\n                }\n            }\n        })\n    } \n    node.ancestors = [...aNodes].concat([...aEdges]);\n}\n\n/**\n * Check if an edge is ancestor of node\n * @param {*} edgeOrNode the edge or node to check\n * @param {*} node\n * @return the list of ancestor nodes\n */\nfunction isAncestor(edgeOrNode, node) {\n    return node.ancestors.includes(edgeOrNode);\n}\n\nfunction highlightDependencies() {\n    if (toggleHighlight === 0) {\n        // Reduce the opacity of all but the ancestor nodes\n        let d = d3.select(this).data()[0];\n        nodes.style(\"opacity\", function (o) {\n            return isAncestor(o, d) ? 1 : 0.1;\n        });\n        edges.style(\"opacity\", function (o) {\n            return isAncestor(o, d) ? 1 : 0.1;\n        });\n        // mark hightlighting as on\n        toggleHighlight = 1;\n    } else {\n        // Put opacity back to 1 for all nodes and links\n        nodes.style(\"opacity\", 1);\n        edges.style(\"opacity\", 1);\n        // mark highlighting as off\n        toggleHighlight = 0;\n    }\n}\n"],"names":["_ajax","courseid","full","Ajax","call","methodname","args","fail","ex","console","log","then","dependencies","dimensions","_screen$orientation","width","height","simulation","allEdges","setupSvg","d3","select","attr","dev","append","document","querySelector","parentNode","clientWidth","screen","orientation","type","svgWidth","forEach","d","depend","JSON","parse","generateSimplifiedSimulation","forceSimulation","force","forceX","forceY","forceCollide","radius","forceManyBody","strength","forceLink","computeEdgesSimplifiedDependencies","leaves","c","flatMap","op","cm","filter","_ref","id","name","predecessor","map","_ref2","target","source","flat","distance","displaySimplifiedGraph","s_edges","links","selectAll","data","enter","arrowWidth","s_nodes","nodes","join","clone","lower","displaySimplifiedNodesAndLabels","displaySimplifiedEdges","generateFullSimulation","computeEdgesAndNodesFullDependencies","onlyNonCompletionConditionsIn","dependList","length","uid","getNextUID","extractActivityNodes","genus","isSource","isTarget","edges","extractEdgesAndNodes","toGenus","el","e","newEdge","sn","find","n","push","newNode","newEdgeFromNot","newEdgeToNot","a","displayFullGraph","displayFullNodesAndLabels","displayFullEdges","labels","node","toBeExaminedNodes","aNodes","Set","aEdges","_loop","currentNode","shift","add","ed","has","ancestors","_toConsumableArray","concat","computeAndStoreAncestorEdgesAndNodes","on","tick","makeDraggable","drag","event","active","alphaTarget","restart","fx","x","fy","y","highlightDependencies","toggleHighlight","text","isAncestor","edgeOrNode","includes","this","style","o"],"mappings":"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"}