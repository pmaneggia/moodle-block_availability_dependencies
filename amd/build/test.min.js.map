{"version":3,"sources":["../src/test.js"],"names":["init","content","setupSvg","simulation","generateSimulation","display","rememberD3Selections","on","tick","makeDraggable","svg","document","querySelector","width","parentNode","clientWidth","height","d3","select","attr","dependencies","forceSimulation","computeNodes","force","forceManyBody","forceLink","computeEdges","id","d","forceCenter","Object","keys","map","x","data","entries","filter","key","value","flatMap","c","type","target","source","cm","op","displayEdges","links","displayNodesAndLabels","nodes","s_edges","selectAll","enter","append","s_nodes","join","edges","labels","n","y","e","text","call","drag","event","fx","fy","alpha","restart"],"mappings":"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","sourcesContent":["export const init = (content) => {\n    setupSvg();\n    let simulation = generateSimulation(content);\n    display(simulation);\n    rememberD3Selections();\n    simulation.on('tick', tick);\n    makeDraggable(simulation);\n};\n\n/**\n * Make the svg as wide as the parent, height is width * 0.6, center viewBox.\n */\nfunction setupSvg() {\n    let svg = document.querySelector('svg');\n    let width = svg.parentNode.clientWidth;\n    let height = width * 0.6;\n    d3.select('svg')\n        .attr('width', width)\n        .attr('height', height)\n        .attr('viewBox', -width/2 + ' ' + -height/2 + ' ' + width + ' ' + height);\n}\n\n/**\n * Generate a simulation, using the nodes and edges (links)\n * extracted from json string representing the dependencies between course modules.\n * The nodes are indexed by the course module id.\n * @param {*} dependencies\n * @returns \n */\nfunction generateSimulation(dependencies) {\n    return d3.forceSimulation(computeNodes(dependencies))\n        .force('charge', d3.forceManyBody())\n        .force('link', d3.forceLink(computeEdges(dependencies)).id(d => d.id))\n        .force('center', d3.forceCenter());\n}\n\n/**\n * Compute the nodes for d3-force as an array of objects {id: cm_id}.\n * \n * @param {*} dependencies\n * @returns \n */\nfunction computeNodes(dependencies) {\n    return Object.keys(dependencies).map(x => {return {id: x}});\n}\n\n/**\n * Compute the edges (links) for d3-force\n * as an array of objects {source: cm_id, target: cm_id}.\n * 1) filter out all elements with no dependencies;\n * 2) filter out all dependencies that are not type: completion\n * 3) for each remaining produce an edge with source and target, collecting also the operator. \n */ \nfunction computeEdges(data) {\n    return Object.entries(data).filter(([key, value]) => (value !== null))\n        .flatMap(([key, value]) => {\n            return value.c.filter(x => x.type == 'completion').map(x => {return {target: key, source: x.cm + '', op: value.op}})\n        });\n}\n\n/**\n * Use d3 to display nodes and edges (links).\n * @param {*} simulation \n */\nfunction display(simulation) {\n    displayEdges(simulation.force('link').links());\n    displayNodesAndLabels(simulation.nodes());\n}\n\nfunction displayEdges(s_edges) {\n    d3.select('svg').selectAll('line').data(s_edges)\n        .enter().append('line')\n        .attr('stroke', 'lightgray')\n        .attr('stroke-width', '2px')\n        .attr('marker-end', 'url(#arrow)');\n}\n\nfunction displayNodesAndLabels(s_nodes) {\n    d3.select('svg').selectAll('circle').data(s_nodes)\n        .join('circle')\n        .attr('fill', '#00a8d5')\n        .attr('stroke', 'white')\n        .attr('r', 5);\n    d3.select('svg').selectAll('text').data(s_nodes)\n        .join('text')\n        .attr('fill', 'darkgray')\n        .attr('font-family', 'sans-serif')\n        .attr('font-weight', 'bold');\n}\n\nlet edges, nodes, labels;\n\nfunction rememberD3Selections() {\n    edges = d3.select('svg').selectAll('line');\n    nodes = d3.select('svg').selectAll('circle');\n    labels = d3.select('svg').selectAll('text');\n}\n\n/**\n * Update the simulation.\n */\nfunction tick() {\n    nodes\n        .attr('cx', n => n.x)\n        .attr('cy', n => n.y);\n    edges\n        .attr('x1', e => e.source.x)\n        .attr('y1', e => e.source.y)\n        .attr('x2', e => e.target.x)\n        .attr('y2', e => e.target.y);\n    labels\n        .attr('x', n => n.x + 5)\n        .attr('y', n => n.y - 5)\n        .text(n => n.id);\n}\n\nfunction makeDraggable(simulation) {\n    nodes\n        .call(d3.drag().on('drag',\n            (event, n) => {\n                n.fx = event.x;\n                n.fy = event.y;\n                simulation.alpha(1).restart();\n            }))\n}\n\n"],"file":"test.min.js"}